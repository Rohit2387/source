#! /usr/bin/packo-do rc

puts "Distr√∏, #{'THE'.bold} distribution. http://distro.github.com"
puts '--------------------------------------------------'
puts ''

Hooks[:sysinit, :start].run

Environment[:PATH, false] = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
Environment[:SILENT]      = true

sh! %{
  mountpoint -q /proc || mount -n -t proc proc /proc -o nosuid,noexec,nodev
  mountpoint -q /sys  || mount -n -t sysfs sysfs /sys -o nosuid,noexec,nodev
  mountpoint -q /run  || mount -n -t tmpfs tmpfs /run -o mode=0755,size=10M,noexec,nodev

  if ! mountpoint -q /dev; then
    if grep -q devtmpfs /proc/filesystems; then
      mount -n -t devtmpfs udev /dev -o mode=0755,size=10M,nosuid
    else
      mount -n -t tmpfs udev /dev -o mode=0755,size=10M,nosuid
    fi
  fi

  mkdir -p /run/lock
  mkdir -p /dev/{pts,shm}

  mountpoint -q /dev/pts || mount /dev/pts || mount -n -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
  mountpoint -q /dev/shm || mount /dev/shm || mount -n -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev
}

if sh!('findmnt / --options ro')
  CLI.message 'Mounting Root Read-Only...' do
    sh! 'mount -n -o remount,ro /'
  end or exec 'sulogin -p'
end

sh! %{
  minilogd
  bootlogd -p /run/bootlogd.pid
}

if matches = File.read('/proc/cmdline').match(/verbose(?:=([1-8]))?/)
  sh! "dmesg -n #{matches[1] || 3}"
end

if matches = Config['general']['hwclock'].match(/(utc|local(time))?/i)
  type = matches[1].to_s.downcase

  sh! 'modprobe -q -a rtc-cmos rtc genrtc'

  if !File.exists?('/dev/rtc') && !File.exists('/dev/rtc0')
    ['/sys/class/rtc/rtc0/dev', '/sys/class/misc/rtc/dev'].each {|dev|
      next unless File.exists?(dev)

      sh! "mknod /dev/rtc c #{File.read(dev).split(':').join(' ')}"
    }
  end

  if File.exists?('/etc/localtime')
    sh! "hwclock #{type.start_with?('local') ? '--localtime' : '--utc'} --noadjfile"
  end
end

ClI.message 'Starting UDev Daemon...' do
  sh! 'udevd --daemon'
end or exec 'sulogin -p'

Hooks[:sysinit, :udev, :launched].run

if !OS::Process.from_name('udevd').empty?
  CLI.message 'Triggering UDev uevents...' do
    sh! %{
      udevadm trigger --action=add --type=subsystems
      udevadm trigger --action=add --type=devices
    }
  end
end

if File.exists?('/proc/modules')
  CLI.message 'Loading Modules...' do
    Config['system']['modules'].sort {|a, b|
      if a.start_with?('-')
        if b.start_with?('-')
          0
        else
          1
        end
      else
        if b.start_with?('-')
          -1
        else
          0
        end
      end
    }.each {|mod|
      if mod.start_with?('-')
        sh! "modprobe -r #{mod[1 .. -1]}"
      else
        sh! "modprobe #{mod}"
      end
    }
  end
end

if !OS::Process.from_name('udevd').empty?
  CLI.message 'Waiting for UDev uevents to be processed...' do
    sh! "udevadm settle --quiet --timeout=#{(Config['system']['udev']['timeout'] rescue nil) || 30}"
  end
end

Hooks[:sysinit, :udev, :settled].run

if File.directory?('/sys/class/net/lo')
  CLI.message 'Bringing up loopback interface...' do
    sh! 'ifconfig lo 127.0.0.1 up'
  end
end

if raid?
  CLI.message 'Activating FakeRAID arrays' do
    sh! 'dmraid -i -ay'
  end
end

if btrfs?
  CLI.message 'Activating BTRFS volumes' do
    sh! 'btrfs device scan'
  end
end

lvm_start

if crypttab?
  sh! 'modprobe -q dm-crypt'

  CLI.message 'Unlocking encrypted volumes:' do
    File.read('/etc/crypttab').lines.map {|line|
      matches = line.match(/^\s*(.*?)\s*(.*?)\s*(.*?)\s*(.*?)$/) or next

      matches.to_a[1 .. -1]
    }.compact.all? {|name, source, password, options|
      CLI.info "#{name}.."

      case password
        when /^swap$/i
          break false unless sh "blkid -p '#{source}'", throw: false == 2

          CLI.info 'creating swapspace...'

          sh! %{
            cryptsetup -d /dev/urandom #{options} create #{name.shellescape} #{source.shellescape}
            mkswap -f -L  #{name.shellescape} /dev/mapper/#{name.shellescape}
          }

        when /^ask$/i
          CLI.info "Opening '#{name}' volume:"

          sh! "cryptsetup #{options} luksOpen #{source.shellescape} #{name.shellescape} < /dev/console"

        else
          sh! "echo #{password.shellescape} | cryptsetup #{options} luksOpen #{source.shellescape} #{name.shellescape}"
      end
    } and lvm_start
  end
end

netfs = 'nonfs,nonfs4,nosmbfs,nocifs,nocodafs,noncpfs,nosysfs,noshfs,nofuse,nofuseblk,noglusterfs,nodavfs'

if File.executable?('/sbin/fsck')
  force = File.exists?('/forcefsck') || File.read('/proc/cmdline').include?('forcefsck')

  Hooks[:sysinit, :fsck, :pre].run

  status = sh "fsck -A -T -C -a -t '#{netfs},noopts=_netdev' #{'-- -f' if force} >/dev/stdout 2>/dev/stdout", echo: false, silent: false, throw: false

  if status & 2 == 2
    CLI.puts %{
      ********************** REBOOT REQUIRED *********************
      *                                                          *
      * The system will be rebooted automatically in 15 seconds. *
      *                                                          *
      ************************************************************
    }

    sleep 15
    reboot
  elsif status > 1 && status != 32
    CLI.puts %{
      *****************  FILESYSTEM CHECK FAILED  ****************
      *                                                          *
      *  Please repair manually and reboot. Note that the root   *
      *  file system is currently mounted read-only. To remount  *
      *  it read-write type: mount -n -o remount,rw /            *
      *  When you exit the maintenance shell the system will     *
      *  reboot automatically.                                   *
      *                                                          *
      ************************************************************
    }

    sh 'sulogin -p', echo: false
    reboot
  end
end

CLI.message 'Mounting Local Filesystems...' do
  sh! 'mount -n -o remount,rw /'

  if File.symlink?('/etc/mtab')
    # don't touch /etc/mtab if it is a symlink to /proc/self/mounts
  elsif File.executable?('/bin/findmnt') && File.exists?('/proc/self/mountinfo')
    sh! 'finmnt -rnu -o SOURCE,TARGET,FSTYPE,OPTIONS >| /etc/mtab'
  else
    sh! 'cat /proc/mounts >| /etc/mtab'
  end

  Hooks[:sysinit, :mount, :pre].run

  sh! "mount -a -t #{netfs} -O no_netdev"
end

if lvm?
  # enable monitoring of lvm2 groups, now that the filesystems are mounted rw
  CLI.message 'Activating monitorong of LVM2 groups...' do
    sh! 'vgchange --monitor y'
  end
end

CLI.message 'Activating swap...' do
  sh! 'swapon -a'
end

if timezone?
  CLI.message 'Configuring Time Zone...' do
    Do.cp timezone!, '/etc/localtime'
  end
end

if random_seed?
  CLI.message 'Initializing Random Seed...' do
    sh! 'cat /var/lib/misc/random-seed > /dev/urandom'
  end
end

CLI.message 'Cleaning up temporary files...' do
  sh! %{
    rm /etc/{nologin,shutdownpid} /forcefsck

    rm -rf /tmp/*
    rm -rf /tmp/.*

    rm -rf /var/lock/*

    find /var/run \! -type d -delete
    rm -rf /var/run/daemons
    ln -sf /run/daemons /var/run/daemons

    truncate --size 0 /var/run/utmp
    chmod 0664 /var/run/utmp
    chown -hR root:utmp /var/run/utmp

    mkdir -p -m1777 /tmp/.{X11,ICE}-unix
  }
end

if Config['networking']['hostname']
  CLI.message "Setting Hostname: #{Config['networking']['hostname']}..." do
    sh! "hostname #{Config['networking']['hostname'].shellescape}"
  end
end

CLI.message "Setting Locale: #{Config['general']['locale'] ||= 'en_US.UTF-8'}..." do
  sh! %{
    truncate --size 0 /etc/profile.d/locale.sh
    chmod 755 /etc/profile.d/locale.sh

    echo "export LANG=#{Config['general']['locale']}" >> /etc/profile.d/locale.sh
  }
end

if Config['general']['locale'].match(/utf/i)
  CLI.message 'Setting Consoles to UTF-8 mode...' do
    Dir['/dev/tty[0-9]*'].each {|tty|
      sh! %{
        kbd_mode -u < #{tty}
        printf "\033%%G" > #{tty}
      }
    }

    File.write('/sys/module/vt/parameters/default_utf8', 1)
  end
else
  CLI.message 'Setting Consoles to legacy mode...' do
    Dir['/dev/tty[0-9]*'].each {|tty|
      sh! %{
        kbd_mode -a < #{tty}
        printf "\033%%@" > #{tty}
      }
    }

    File.write('/sys/module/vt/parameters/default_utf8', 0)
  end
end

if Config['general']['keymap']
  CLI.message "Loading Keyboard Map: #{Config['general']['keymap']}..." do
    sh! "loadkeys -q #{'-u' if Config['general']['locale'].match(/utf/i)} #{Config['general']['keymap']}"
  end
end

sh! 'dmesg >| /var/log/dmesg.log'

Hooks[:sysinit, :end].run
